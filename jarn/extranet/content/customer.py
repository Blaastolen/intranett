from AccessControl import ClassSecurityInfo

from zope.interface import implements

from Products.CMFCore.utils import getToolByName
from Products.Archetypes.public import BaseSchema, Schema, BaseFolder
from Products.Archetypes.public import ReferenceField, ReferenceWidget
from Products.Archetypes.public import LinesField, MultiSelectionWidget
from Products.Archetypes.public import registerType
from Products.Archetypes.public import DisplayList


from Products.membrane.interfaces import IMembraneUserAuth
from Products.membrane.interfaces import IGroup
from Products.membrane.interfaces import IMembraneUserGroups
from Products.membrane.interfaces import IUserRelated
from Products.membrane.config import TOOLNAME
from Products.membrane.utils import getFilteredValidRolesForPortal
from borg.localrole.interfaces import ILocalRoleProvider

from jarn.extranet.customer.config import PROJECTNAME
from jarn.extranet.customer.interfaces import ICustomer

CustomerSchema = BaseSchema + Schema((
    ))


class LocalRoles(object):
    """Provide a local role manager for groups
    """
    implements(ILocalRoleProvider)

    def __init__(self, context):
        self.context = context

    def getAllRoles(self):
        group = IUserRelated(self.context)
        yield (group.getUserId(), ('Reader',))

    def getRoles(self, principal_id):
        for (pid,roles) in self.getAllRoles():
            if pid == principal_id:
                for r in roles:
                    yield r

class Customer(BaseFolder):
    """A archetype representative for a Jarn Customer"""
    schema = CustomerSchema
    _at_rename_after_creation = True

    implements(ICustomer, IGroup, IMembraneUserGroups)

    security = ClassSecurityInfo()


    
    def getGroupName(self):
        return self.getId()
        

    #####################################################
    # IGroup implementation
    # NOTE: Title() are autogenerated
    #####################################################
    def getGroupId(self):
        return self.getId()

    def getUserId(self):
        return self.getId()
    
    def getRoles(self):
        return []


    def getGroupMembers(self):
        # All references and all subobjects that are members
        members = {}
        mt = getToolByName(self, TOOLNAME)
        usr = mt.unrestrictedSearchResults
        for m in usr(object_implements=IMembraneUserAuth.__identifier__,
                     path='/'.join(self.getPhysicalPath())):
            members[m.getUserId] = 1
        return tuple(members.keys())

    def listUsers(self):
        """
        Return a DisplayList of users
        """
        catalog = getToolByName(self, TOOLNAME)

        results = catalog(object_implements=IMembraneUserAuth.__identifier__)
        value = []
        for r in results:
            key = r.getUserName is not None and \
                  r.getUserName.strip() or r.getUserId
            value.append((key.lower(), (r.UID, key)))
        value.sort()
        value = [r for throwaway, r in value]
        value.insert(0, ('', '<no reference>'))
        return DisplayList(value)

    getRoleSet = getFilteredValidRolesForPortal

registerType(Customer, PROJECTNAME)
