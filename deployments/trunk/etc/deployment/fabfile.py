import os

from fabric.api import cd
from fabric.api import env
from fabric.api import get
from fabric.api import hide
from fabric.api import local
from fabric.api import run
from fabric.api import settings
from fabric.api import show
from fabric.api import sudo
from pkg_resources import parse_version

env.shell = "/bin/bash -c"
home = '/srv/jarn'

DISTRIBUTE_VERSION = '0.6.14'
PIL_VERSION = '1.1.7-jarn1'
PIL_LOCATION = 'http://dist.jarn.com/public/PIL-%s.zip' % PIL_VERSION


def svn_info():
    with cd(home):
        sudo('pwd && svn info', user='jarn')


def dump_db():
    with cd(home):
        sudo('rm var/snapshotbackups/*', user='jarn')
        sudo('bin/snapshotbackup', user='jarn')


def download_last_dump():
    with settings(hide('warnings', 'running', 'stdout', 'stderr'),
                  warn_only=True):
        existing = sudo('ls -rt1 %s/var/snapshotbackups/*' % home, user='jarn')
    for e in existing.split('\n'):
        get(e, os.path.join(os.getcwd(), 'var', 'snapshotbackups'))


def init_server():
    home = '/home/hannosch'
    # set up environment variables
    with settings(hide('stdout', 'stderr')):
        profile = run('cat %s/.bash_profile' % home)
    profile_lines = profile.split('\n')
    exports = [l for l in profile_lines if l.startswith('export INTRANETT_')]
    if len(exports) < 2:
        start, end = profile_lines[:2], profile_lines[2:]
        subdomain = env.host_string
        domain_line = 'export INTRANETT_DOMAIN=%s.intranett.no\n' % subdomain
        with settings(hide('stdout', 'stderr')):
            front_ip = run('/sbin/ifconfig ethfe | head -n 2 | tail -n 1')
        front_ip = front_ip.lstrip('inet addr:').split()[0]
        front_line = 'export INTRANETT_ZOPE_IP=%s' % front_ip

        new_file = start + [front_line] + [domain_line] + end
        with settings(hide('running', 'stdout', 'stderr')):
            run('echo -e "{content}" > {home}/.bash_profile'.format(
                home=home, content='\n'.join(new_file)))

    # set cron mailto
    with settings(hide('stdout'), warn_only=True):
        # if no crontab exists, this crontab -l has an exit code of 1
        run('crontab -l > %s/crontab.tmp' % home)
        crontab = run('cat %s/crontab.tmp' % home)
    cron_lines = crontab.split('\n')
    mailto = [l for l in cron_lines if l.startswith('MAILTO')]
    # XXX hosting@jarn.com
    CRON_MAILTO = 'hanno@jarn.com'
    wrong_address = not CRON_MAILTO in mailto
    if not mailto or wrong_address:
        # add mailto right after the comments
        boilerplate = ('DO NOT EDIT THIS FILE', 'installed on',
            'Cron version V5.0')
        new_cron_lines = []
        added = False
        for line in cron_lines:
            if line.startswith('#'):
                # Remove some excessive boilerplate
                skip = False
                for b in boilerplate:
                    if b in line:
                        skip = True
                if not skip:
                    new_cron_lines.append(line)
            elif line.startswith('MAILTO') and wrong_address:
                continue
            else:
                if not added:
                    new_cron_lines.append('MAILTO=%s' % CRON_MAILTO)
                    added = True
                new_cron_lines.append(line)
        if not added:
            new_cron_lines.append('MAILTO=%s' % CRON_MAILTO)
        with settings(hide('running', 'stdout', 'stderr')):
            run('echo -e "{content}" > {home}/crontab.tmp'.format(
                home=home, content='\n'.join(new_cron_lines)))
            run('crontab %s/crontab.tmp' % home)
    with settings(hide('stdout', 'stderr')):
        run('rm %s/crontab.tmp' % home)

    SVN_AUTH = '--username=intranett --password=mfrOW0LW2ipAnW'
    SVN_FLAGS = '--trust-server-cert --non-interactive'
    SVN_CONFIG = os.path.join(home, '.subversion', 'config')
    SVN_PREFIX = 'https://svn.jarn.com/jarn/intranett.no/deployments/tags'

    # disable storing svn passwords
    with settings(hide('stdout', 'stderr', 'warnings'), warn_only=True):
        # run svn info once, so we create ~/.subversion/config
        run('svn info')
        output = run('cat %s' % SVN_CONFIG)
    lines = output.split('\n')
    new_lines = []
    changed = False
    for line in lines:
        if 'store-passwords = no' in line:
            changed = True
            new_lines.append('store-passwords = no')
        else:
            new_lines.append(line)
    if changed:
        with settings(hide('running', 'stdout', 'stderr')):
            run('echo -e "{content}" > {config}'.format(
                content='\n'.join(new_lines), config=SVN_CONFIG))

    # calculate latest tag
    with settings(hide('running')):
        tags = local('svn {flags} ls {auth} {svn}'.format(
            auth=SVN_AUTH, flags=SVN_FLAGS, svn=SVN_PREFIX))
    tags = [t.rstrip('/') for t in tags.split('\n')]
    tags = [(parse_version(t), t) for t in tags]
    tags.sort()
    latest_tag = tags[-1][1]

    # bootstrap virtualenv
    with settings(hide('stdout', 'stderr')):
        run('cd %s && virtualenv-2.6 --no-site-packages --distribute venv' % home)
        run('rm -rf /tmp/distribute*')
        venv = os.path.join(home, 'venv')
        with cd(venv):
            run('bin/easy_install-2.6 distribute==%s' % DISTRIBUTE_VERSION)
            run('rm %s/bin/activate' % venv)
            run('rm %s/bin/activate_this.py' % venv)
            run('rm %s/bin/pip' % venv)
            # Only install PIL if it isn't there
            with settings(hide('warnings'), show('stdout'), warn_only=True):
                out = run('bin/python -c "from PIL import Image; print(Image.__version__)"')
            if PIL_VERSION not in out:
                run('bin/easy_install-2.6 %s' % PIL_LOCATION)
                run('rm %s/bin/pil*.py' % venv)

    # is this already a checkout?
    with settings(hide('stdout', 'stderr', 'warnings'), warn_only=True):
        out = run('svn info %s' % venv)
    command = 'switch' if 'Revision' in out else 'co'
    with settings(hide('stdout', 'stderr', 'running')):
        run('svn {flags} {command} {auth} {svn}/{tag} {loc}'.format(
            flags=SVN_FLAGS, command=command, auth=SVN_AUTH, svn=SVN_PREFIX,
            tag=latest_tag, loc=venv))

    # buildout
    with cd(venv):
        run('bin/python2.6 bootstrap.py -d')
        run('bin/buildout')
