#
# Generated by dumpDCWorkflow.py written by Sebastien Bigaret
# Original workflow id/title: invoice_workflow/Invoice Workflow [Plone]
# Date: 2006/06/11 20:53:19.716 GMT+2
#
# WARNING: this dumps does NOT contain any scripts you might have added to
# the workflow, IT IS YOUR RESPONSABILITY TO MAKE BACKUPS FOR THESE SCRIPTS.
#
# No script detected in this workflow
#
"""
Programmatically create a workflow type.
"""
__version__ = "$Id: dumpDCWorkflow.py 20757 2006-03-12 23:02:15Z encolpe $"

from Products.CMFCore.WorkflowTool import addWorkflowFactory
from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition
from Products.PythonScripts.PythonScript import PythonScript
from Products.ExternalMethod.ExternalMethod import ExternalMethod

def setup_invoice_workflow(wf):
    """Setup the workflow
    """
    wf.setProperties(title='Invoice Workflow [Plone]')

    for s in ('Cancelled', 'Draft', 'Paid', 'Sent'):
        wf.states.addState(s)
    for t in ('cancel', 'edit', 'paid', 'send'):
        wf.transitions.addTransition(t)
    for v in ('action', 'actor', 'comments', 'review_history', 'time'):
        wf.variables.addVariable(v)
    for l in ('reviewer_queue',):
        wf.worklists.addWorklist(l)
    for p in ('Access contents information',
              'Modify portal content',
              'View',
              'List folder contents'):
        wf.addManagedPermission(p)

    # Initial State
    wf.states.setInitialState('Draft')

    # State Initialization
    sdef = wf.states['Cancelled']
    sdef.setProperties(title='',
                       description='',
                       transitions=('edit',))
    sdef.setPermission('Access contents information', 0,
                       ['Authenticated'])
    sdef.setPermission('Modify portal content', 0,
                       [])
    sdef.setPermission('View', 0,
                       ['Authenticated'])
    sdef.setPermission('List folder contents', 0,
                       ['Authenticated'])

    sdef = wf.states['Draft']
    sdef.setProperties(title='Public Draft',
                       description='',
                       transitions=('send',))
    sdef.setPermission('Access contents information', 1,
                       [])
    sdef.setPermission('Modify portal content', 1,
                       [])
    sdef.setPermission('View', 1,
                       [])
    sdef.setPermission('List folder contents', 1,
                       [])

    sdef = wf.states['Paid']
    sdef.setProperties(title='',
                       description='',
                       transitions=())
    sdef.setPermission('Access contents information', 0,
                       ['Authenticated'])
    sdef.setPermission('Modify portal content', 0,
                       [])
    sdef.setPermission('View', 0,
                       ['Authenticated'])
    sdef.setPermission('List folder contents', 0,
                       ['Authenticated'])

    sdef = wf.states['Sent']
    sdef.setProperties(title='',
                       description='',
                       transitions=('cancel', 'paid'))
    sdef.setPermission('Access contents information', 0,
                       ['Authenticated'])
    sdef.setPermission('Modify portal content', 0,
                       [])
    sdef.setPermission('View', 0,
                       ['Authenticated'])
    sdef.setPermission('List folder contents', 0,
                       ['Authenticated'])

    # Transition Initialization
    tdef = wf.transitions['cancel']
    tdef.setProperties(title='Cancel',
                       description='',
                       new_state_id='Cancelled',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Cancel invoice',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'Owner; Manager'},
                       )

    tdef = wf.transitions['edit']
    tdef.setProperties(title='Re-open for editing',
                       description='',
                       new_state_id='Draft',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Edit',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'Manager; Owner'},
                       )

    tdef = wf.transitions['paid']
    tdef.setProperties(title='Payment received',
                       description='',
                       new_state_id='Paid',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Payment received',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'Owner; Manager'},
                       )

    tdef = wf.transitions['send']
    tdef.setProperties(title='Lock and send',
                       description='',
                       new_state_id='Sent',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Lock and send',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_permissions': 'Modify portal content', 'guard_roles': 'Owner; Manager'},
                       )

    # State Variable
    wf.variables.setStateVar('review_state')

    # Variable Initialization
    vdef = wf.variables['action']
    vdef.setProperties(description='The last transition',
                       default_value='',
                       default_expr='transition/getId|nothing',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['actor']
    vdef.setProperties(description='The ID of the user who performed the last transition',
                       default_value='',
                       default_expr='user/getId',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['comments']
    vdef.setProperties(description='Comments about the last transition',
                       default_value='',
                       default_expr="python:state_change.kwargs.get('comment', '')",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['review_history']
    vdef.setProperties(description='Provides access to workflow history',
                       default_value='',
                       default_expr='state_change/getHistory',
                       for_catalog=0,
                       for_status=0,
                       update_always=0,
                       props={'guard_permissions': 'Request review; Review portal content'})

    vdef = wf.variables['time']
    vdef.setProperties(description='Time of the last transition',
                       default_value='',
                       default_expr='state_change/getDateTime',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    # Worklist Initialization
    ldef = wf.worklists['reviewer_queue']
    ldef.setProperties(description='Reviewer tasks',
                       actbox_name='Pending (%(count)d)',
                       actbox_url='%(portal_url)s/search?review_state=pending',
                       actbox_category='global',
                       props={'guard_permissions': 'Review portal content',
                              'var_match_review_state': 'pending'})

def create_invoice_workflow(id):
    """Create, setup and return the workflow.
    """
    ob = DCWorkflowDefinition(id)
    setup_invoice_workflow(ob)
    return ob

addWorkflowFactory(create_invoice_workflow,
                   id='invoice_workflow',
                   title='Invoice Workflow [Plone]')
